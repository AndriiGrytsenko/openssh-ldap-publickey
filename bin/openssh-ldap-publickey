#!/usr/bin/perl
use Net::LDAP;
use Getopt::Long;
use POSIX qw(strftime);
use Sys::Syslog qw(:standard :macros);
use File::Basename;
use strict;
use warnings;

my $secret_file = '/etc/ldap.secret';
my $version = '1.0.1';
my $prog_name = basename($0);

my $log_file = "stderr";
my $log_threshold = LOG_ERR;

sub help {
    select(STDERR) if $_[0];
    print "Usage: $prog_name [options] <username>\n";
    print "Version: $version\n";
    print "\n";
    print "Options:\n";
    print "\t--log=[syslog|stderr|filename]\tSet log target (default: stderr)\n";
    print "\t-h --help\tPrint this help message and exit\n";
    print "\t-v --version\tPrint the version number and exit\n";
    print "\n";
    print "Example:\n";
    print "\t". basename($0) ." username\n";
    print "If successful, it will write something like this to stdout:\n";
    print "\t".'ssh-rsa some_long_long_key user@hostname'."\n";
    exit $_[0];
}

sub version {
    my $version = shift;

    print "$version\n";
    exit;
}

sub parse_config {
    my ($config_file) = @_;

    my $conf;
    my @lines = read_file($config_file);

    foreach my $line (@lines) {
        next if ( $line =~ /^#/ || $line =~ /^\s+$/ );

        # remove leading whitespace
        $line =~ s/^\s+//;

        # remove trailing whitespace
        $line =~ s/\s+$//;

        # Save all possible values and don't limit us to single key and value pairs.
        # In some cases we might need the other values.
        my @tmp = split(/\s+/, $line, 2);
        if (scalar(@tmp) < 2) {
            die("Error, incorrect config line, should at least contain key, value pair.");
        }

        # In most cases the key is at element 0 and the value is at element 1.
        my $key = $tmp[0];
        my $val = $tmp[1];
        # convert keys to lower case
        $key = lc($key);

        # In some cases uri has multiple hosts for fail over purpose, check if this is the case
        # and create an array of uri entries.
        # Net::LDAP supports arrayref for hosts.
        # According to docs:
        #   HOST may also be a reference to an array of hosts, host-port pairs or URIs to try.
        #   Each will be tried in order until a connection is made.
        #   Only when all have failed will the result of undef be returned.
        if ($key eq 'uri') {
            $conf->{$key} = [ split(/\s+/, $val) ];
        }
        elsif ($key eq 'base') {
            # base ou=... / base group ou=... / base passwd ou=...
            my @vals = split(/\s+/, $val);
            if (scalar(@vals) == 1) {
                $conf->{$key} = $val;
            }
            elsif (scalar(@vals) == 2 && $vals[0] eq 'passwd') {
                push(@{$conf->{'base_passwd'}}, { base_passwd => $vals[1] });
            }
        }
        # In some cases nss_base_passwd is defined multiple times, check if this is the case
        # and add to the array of base_passwd entries.
        elsif ($key eq 'nss_base_passwd') {
            $val = parse_nss_base_passwd($val);
            push(@{$conf->{'base_passwd'}}, $val);
        }
        elsif ($key =~ /^tls_.+/) {
            map_tls_options($conf, $key, $val);
        }
        else {
            $conf->{$key} = $val;
        }
    }

    if (!$conf->{'verify'}) {
        # If no TLS_REQCERT key was there, set a safe default option.
        $conf->{'verify'} = 'require';
    }

    return($conf);
}

sub map_tls_options {
    my ($conf, $key, $val) = @_;

    my %map = (
        'tls_reqcert' => sub { $conf->{'verify'} = map_tls_reqcert(shift); },
        'tls_cacert' => sub { $conf->{'cafile'} = shift; },
        'tls_cacertfile' => sub { $conf->{'cafile'} = shift; },
        'tls_cacertdir' => sub { $conf->{'capath'} = shift; },
        'tls_cert' => sub { $conf->{'clientcert'} = shift; },
        'tls_key' => sub { $conf->{'clientkey'} = shift; },
        );
    $map{$key}->($val);
}

sub map_tls_reqcert {
    my $reqcert = shift;

    # Mapping from TLS_REQCERT to Net::LDAP->new()'s verify
    my %map = (
        'never' => 'none',
        'allow' => 'optional',
        'try' => 'optional',
        'demand' => 'require',
        );
    return $map{$reqcert};
}

sub parse_nss_base_passwd {
    my $nss_base_passwd = shift;

    my $result = {
        'base_passwd' => undef,
        'scope'       => undef,
    };

    # Support nss_base_passwd with scope notation
    # example:
    # nss_base_passwd ou=People?one
    if ($nss_base_passwd =~ /([^\?]*)(\?([^\?]*))?/) {
        if (defined($1) && length($1)) {
            $result->{'base_passwd'} = $1;
        }
        if (defined($3) && length($3)) {
            $result->{'scope'} = $3;
        }
    }

    return($result);
}

sub parse_secret_file {
    my $secret_file = shift;

    my $secret = read_file($secret_file);
    chomp($secret);
    return($secret);
}

sub check_credentials {
    my $conf = shift;
    my $secret_file = shift;

    my $secret = undef;
    if ( -r $secret_file) {
        $secret = parse_secret_file($secret_file);
    }

    # When no binddn is found find out if we can find an alternative binddn.
    unless ( exists($conf->{'binddn'}) && length($conf->{'binddn'}) ) {
        if ( exists($conf->{'rootbinddn'}) && length($conf->{'rootbinddn'}) ) {
            $conf->{'binddn'} = $conf->{'rootbinddn'};
        }
    }

    # When no bindpw is found find out if we can find an alternative bindpw.
    unless ( exists($conf->{'bindpw'}) && length($conf->{'bindpw'})) {
        if (defined($secret) && length($secret)) {
            $conf->{'bindpw'} = $secret;
        }
    }
    return($conf);
}

sub check_tls_settings {
    my $conf = shift;
	my $params = {};

	# Mapping from ldap.conf to Net::LDAP keys
	my %map = (
        'tls_cacertdir'  => 'capath',
        'tls_cert'       => 'clientcert',
        'tls_key'        => 'clientkey',
        'tls_cacertfile' => 'cafile',
	);

	foreach my $key (keys(%map)) {
		if ( exists($conf->{$key}) && length($conf->{$key}) ) {
			$params->{$map{$key}} = $conf->{$key};
		}
	}

    return($params);
}

sub read_file {
    my $file = shift;

    local($/) = wantarray ? $/ : undef;
    local(*F);
    my $r; my (@r);
    open(F, "<$file") || die("error opening $file: $!");
    @r = <F>;
    close(F) || die("error closing $file: $!");
    return $r[0] unless wantarray;
    return @r;
}

sub writeToLog {
    my ($log_level, $message) = @_;
    return 1 if ($log_level < $log_threshold);

    if ($log_file eq "syslog") {
        syslog($log_level, $message);
        return 1;
    }

    my $timestamp = strftime "%m/%d/%Y %H/%M/%S", localtime;

    if ($log_file eq "stderr") {
        print STDERR "$timestamp: $message\n";
        return 1;
    }

    open(my $fh, ">>", $log_file) or return 0;
    print $fh "$timestamp: $message\n";
    close($fh);

    return 1;
}

sub setLogFile {
    my ($new_log_file) = @_;
    openlog($prog_name, "ndelay,pid", LOG_DAEMON)
        if ($new_log_file eq "syslog");
    $log_file = $new_log_file;
}

local $SIG{__DIE__} = sub {
    writeToLog(LOG_ERR, join(" ", @_));
    exit(1);
};

GetOptions(
    "log=s"     => sub { setLogFile($_[1]) },
    "help|h"    => sub { help(0) },
    "version|v" => sub { version($version) },
);
help(2) unless @ARGV;

my $configuration_file;

my @configuration_files = qw(
	/etc/ldap.conf
	/etc/ldap/ldap.conf
	/etc/pam_ldap.conf
	/etc/libnss-ldap.conf
	/etc/nslcd.conf
);
for my $file ( @configuration_files ) {
	if ( -r $file && -f _ ) {
		$configuration_file = $file;
		last;
	}
}
if ( ! $configuration_file ) {
	my $error = "One of configuration files " . join( ", ", @configuration_files ) . " must be a readable file";
	die("$error!");
}

my $conf = parse_config($configuration_file);

# Validate mandatory config settings
unless (
	exists($conf->{'base'}) && length($conf->{'base'}) &&
	exists($conf->{'uri'}) && length($conf->{'uri'})
) {
	my $error = "Missing one or more mandatory config settings: base and/or uri";
	die("$error!");
}


$log_threshold = $conf->{'openssh_ldap_loglevel'} ? LOG_DEBUG : LOG_ERR
    if exists($conf->{'openssh_ldap_loglevel'});
setLogFile($conf->{'openssh_ldap_logfile'})
    if $conf->{'openssh_ldap_logfile'};
my $timeout = $conf->{'timeout'} || 10;
my $nss_base = $conf->{'nss_base'} || "";
my $base_passwd = $conf->{'base_passwd'} || [ { base_passwd => $nss_base .$conf->{'base'}, scope => undef } ];
my ($mesg, $final_filter);
$conf = check_credentials($conf, $secret_file);

writeToLog(LOG_DEBUG, "Connecting to ldap server $conf->{'uri'} with timeout $timeout");

my $ldap = Net::LDAP->new(
    $conf->{'uri'},
    timeout => $timeout,
    verify => $conf->{'verify'},
    cafile => $conf->{'cafile'},
    capath => $conf->{'capath'},
    clientcert => $conf->{'clientcert'},
    clientkey => $conf->{'clientkey'},
    ) or die "$@";

# When start_tls is enabled get the required settings to setup a TLS connection.
if (exists($conf->{'ssl'}) && $conf->{'ssl'} eq 'start_tls') {
    $ldap->start_tls(check_tls_settings($conf));
}

if (
	exists($conf->{'binddn'}) && length($conf->{'binddn'}) &&
	exists($conf->{'bindpw'})
) {
    writeToLog(LOG_DEBUG, "Try to bind with user $conf->{'binddn'}");
    $ldap->bind(
        $conf->{'binddn'},
        password => $conf->{'bindpw'}
    );
} else {
    writeToLog(LOG_DEBUG, "Try an anonymous bind");
    $ldap->bind or die("$@");
}

# Validate username for any bad characters.
$ARGV[0] =~ /[^a-zA-Z0-9._-]/ && die("bad characters in username");
my $user = $ARGV[0];

if ( $conf->{'pam_filter'} ){
    $final_filter = "&(".$conf->{'pam_filter'}.")(uid=".$user.")";
} else {
    $final_filter = 'uid='.$user;
}

foreach my $entity (@$base_passwd) {
    writeToLog(LOG_DEBUG, "Searching key for user $user by filter $final_filter in base " . $entity->{'base_passwd'});

    my %search_params = (
        base => $entity->{'base_passwd'},
        filter => "$final_filter",
        defined($entity->{'scope'}) ? (scope => $entity->{'scope'}) : (),
        attrs => ['sshPublicKey', 'sshPublickey']
    );

    $mesg = $ldap->search(%search_params);
    foreach my $entity ($mesg->entries) {
        my $keys = $entity->{asn}->{attributes}->[0]->{vals};
        foreach my $key (@$keys){
            writeToLog(LOG_DEBUG, "Key found: $key");
            print "$key\n";
        }
    }
}

writeToLog(LOG_DEBUG, "Disconnecting");
$mesg = $ldap->unbind;
